.. Open-API documentation master file, created by
   sphinx-quickstart on Sat Apr  6 12:39:08 2019.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

.. image:: _static/open-api-logo.png
  :alt: OpenAPI for Python - Serialization / De-serialization of OpenAPI Documents
  :align: right
  :width: 200
  :height: 100

|

####################################################
OpenAPI for Python
####################################################

**Serialization/De-serialization for OpenAPI Documents**

.. sidebar:: Version Compatability

  **OpenAPI for Python** is designed to be compatible with:

    * Python 2.7 and Python 3.4 or higher, and
    * `OpenAPI Specification`_ 3.0 or higher

.. include:: _unit_tests_code_coverage.rst

.. toctree::
 :hidden:
 :maxdepth: 3
 :caption: Contents:

 Home <self>
 Quickstart: Patterns and Best Practices <quickstart>
 Using OpenAPI for Python <using>
 API Reference <api>
 Error Reference <errors>
 Contributor Guide <contributing>
 Testing Reference <testing>
 Release History <history>
 Glossary <glossary>
 License <license>

**OpenAPI for Python** is a Python library that provides Python support for documents
written in the `OpenAPI Specification`_. Use the library to programmatically read,
construct, and validate descriptions of RESTful APIs compliant with version 3 of the
:term:`OpenAPI Standard <OpenAPI>`. Specific features include:

  * :term:`de-serializing <de-serialization>` existing OpenAPI documents from file or URL
  * traversing the entire document structure, whether self-contained or using ``$ref``
  * programmatically modifying the specification of API endpoints, requests, and responses
  * :term:`serializing <serialization>` your API description to OpenAPI v.3.0
  * providing validation and error-checking for requests against a RESTful API and
    responses generated by a RESTful API

The library has been extensively tested on Python 2.7, 3.4, 3.5, 3.6, and 3.7.

-----------------

***************
Installation
***************

.. include:: _installation.rst

Dependencies
==============

.. include:: _dependencies.rst

-------------

************************************
Why OpenAPI for Python
************************************

If you've been involved in the development or documentation of RESTful APIs, odds are you
have come across either :term:`Swagger` (a.k.a. OpenAPI v.2.0) or the
`OpenAPI Initiative <https://www.openapis.org/>`_. While the standard is an excellent
format for describing RESTful APIs in a comprehensive fashion that is both machine and
human-readable, the utility of the standard for developers working in Python is only as
good as the Python tooling that exists for that standard.

**OpenAPI for Python** is meant to be a foundational library for OpenAPI tooling in Python.
It is to some extent inspired by (but does not directly leverage) the excellent work in:

  * `openapi-core <https://github.com/p1c2u/openapi-core>`_
  * `pyswagger <https://github.com/pyopenapi/pyswagger>`_
  * `openapi3 <https://github.com/Dorthu/openapi3>`_

Where **OpenAPI for Python** differs from these other libraries is in three key areas:

  * Full Standard Support. Where each of the projects listed above fall down is in their
    support of the entire OpenAPI standard. By design, **OpenAPI for Python** supports
    the entire OpenAPI v.3 standard, when programmatically editing an OpenAPI
    specification in Python, when reading an OpenAPI specification from JSON or YAML, or
    when writing an OpenAPI specification to JSON or YAML.
  * Comprehensive Object Model and Consistent API. As mentioned, the **OpenAPI for Python**
    object model is intentionally designed to support the full OpenAPI v.3 standard, and
    that object model is inherently designed to provide a consistent, practical, and
    inherently Pythonic API for use by Python developers.
  * Microframework Architecture. The **OpenAPI for Python** library is meant to be a
    foundational utility, and not a full-featured application. If you are looking for code
    generators that can implement a RESTful API based on an OpenAPI specification, then you
    should look elsewhere. **OpenAPI for Python** cannot do that kind of thing - but it can
    *enable* that kind of thing and make the development of robust API test suites, API
    code-generators, API documentation platforms, etc. in Python easier. If those kinds
    of libraries and applications are a house, **OpenAPI for Python** is meant to provide
    the bricks.

Key OpenAPI for Python Features
===================================

* **Easy to adopt**: Minimal dependencies, with native support for Python 2.7 and Python
  3.4 and higher, and entirely ``pip`` installable.
* With one method call, generate a Python representation of an OpenAPI specification
  from a URL, locally on-disk, or from a string object.
* With one method call, output an OpenAPI specification in whole or in part from its Python
  object representation.
* Validate inbound HTTP requests against their corresponding API endpoints.
* Validate your API's output.

**OpenAPI for Python** vs Alternatives
===========================================

.. include:: _versus_alternatives.rst

---------------

***********************************
Hello, World and Basic Usage
***********************************

1. Import OpenAPI for Python
================================

.. code-block:: python

  from open_api import OpenAPI

2. Load an Existing OpenAPI Specification
=============================================

.. code-block:: python

  ## From URL
  specification = OpenAPI.from_url('http://testing.dev/openapi.yaml')
  specification = OpenAPI.from_url('http://testing.dev/openapi.json')

  ## From File
  specification = OpenAPI.from_file('../openapi.yaml')
  specification = OpenAPI.from_file('../openapi.json')

3. Modify the OpenAPI Specification
========================================

.. code-block:: python

  specification.title = 'My Updated Title'

  my_new_path = specification.add_path(id = 'my_new_path',
                                       path = 'some/new/path/\{id\}',
                                       method = 'GET')
  my_new_path_again = specification.get_path(id = 'my_new_path',
                                             method = 'GET')

  ## The entire OpenAPI Specification is available and supported. See API Reference
  ## for more details.

4. Validate Complete Specification for Error Checking
========================================================

.. code-block:: python

  specification.validate(target_file = './error.log')

5. Validate an HTTP Request
=================================

.. code-block:: python

  ## By Path
  request_body = request.json
  request_headers = request.headers
  is_valid = specification.is_valid_request(request_body,
                                            url = 'http://testing.dev/some/new/path',
                                            method = 'POST',
                                            headers = request_headers)

6. Validate an API Response
===============================

.. code-block:: python

  ## By Path
  is_valid = specification.is_valid_response(response_body,
                                             url = 'http://testing.dev/some/new/path/',
                                             method = 'POST',
                                             headers = response_headers)

  ## By Schema Object
  schema_object = specification.get_schema(object_id = 'my_new_path')
  is_valid = schema_object.is_valid(response_body)


7. Output an OpenAPI Specification
====================================

.. code-block:: python

  ## In-Memory / In Object Form
  json_string = specification.to_json()
  yaml_string = specification.to_yaml()
  python_dict = specification.to_dict()

  ## To File
  specification.to_json(target_file = './openapi.json')
  specification.to_yaml(target_file = './openapi.yaml')


--------------

*********************
Questions and Issues
*********************

You can ask questions and report issues on the project's
`Github Issues Page <https://github.com/insightindustry/openapi/issues>`_

-----------------

*********************
Contributing
*********************

We welcome contributions and pull requests! For more information, please see the
:doc:`Contributor Guide <contributing>`

-------------------

*********************
Testing
*********************

We use `TravisCI <http://travisci.org>`_ for our build automation and
`ReadTheDocs <https://readthedocs.org>`_ for our documentation.

Detailed information about our test suite and how to run tests locally can be
found in our :doc:`Testing Reference <testing>`.

--------------------

**********************
License
**********************

**OpenAPI for Python** is made available under an :doc:`MIT License <license>`.

----------------

Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`

.. _OpenAPI Specification: https://github.com/OAI/OpenAPI-Specification/
